name: Build and Push to ECR

on:
  push:
    branches: [ main, master ]

env:
  AWS_REGION: us-west-1
  ECR_WEB_REPOSITORY: tonys-chips-web
  ECR_API_REPOSITORY: tonys-chips-api

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate image tag
        id: image-tag
        run: |
          TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
          GITSHA=$(git rev-parse --short HEAD)
          TAG="${TIMESTAMP}-${GITSHA}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Building images with tag: ${TAG}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Web image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.image-tag.outputs.tag }}
        run: |
          # Get internal ALB DNS from AWS (or use placeholder if not available)
          INTERNAL_ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names tonys-chips-internal-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text 2>/dev/null || echo "http://localhost:3000")

          docker build \
            -f docker/web.Dockerfile \
            --build-arg VITE_API_URL="http://${INTERNAL_ALB_DNS}" \
            -t $ECR_REGISTRY/$ECR_WEB_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_WEB_REPOSITORY:latest \
            .

          docker push $ECR_REGISTRY/$ECR_WEB_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_WEB_REPOSITORY:latest

          echo "Web image pushed: $ECR_REGISTRY/$ECR_WEB_REPOSITORY:$IMAGE_TAG"

      - name: Build and push API image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.image-tag.outputs.tag }}
        run: |
          docker build \
            -f docker/api.Dockerfile \
            -t $ECR_REGISTRY/$ECR_API_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_API_REPOSITORY:latest \
            .

          docker push $ECR_REGISTRY/$ECR_API_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_API_REPOSITORY:latest

          echo "API image pushed: $ECR_REGISTRY/$ECR_API_REPOSITORY:$IMAGE_TAG"

      - name: Output image tags
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.image-tag.outputs.tag }}
        run: |
          echo "::notice::Web Image: $ECR_REGISTRY/$ECR_WEB_REPOSITORY:$IMAGE_TAG"
          echo "::notice::API Image: $ECR_REGISTRY/$ECR_API_REPOSITORY:$IMAGE_TAG"
          echo ""
          echo "To update ECS services with these images:"
          echo "1. Update task definitions in System Initiative with new image tags"
          echo "2. Or use AWS CLI:"
          echo "   aws ecs update-service --cluster tonys-chips-cluster --service web-service --force-new-deployment"
          echo "   aws ecs update-service --cluster tonys-chips-cluster --service api-service --force-new-deployment"
